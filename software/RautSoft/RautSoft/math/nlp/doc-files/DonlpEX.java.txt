import RautSoft.Interfaces.VectorOfFunctionsOfManyVariables;
import RautSoft.Interfaces.FunctionOfManyVariables;
import RautSoft.math.nlp.DonlpJava;

public class DonlpEX {
    
    public static void main(String[] args) {
        final int n=2; //number of variables
        final   int nlin = 1; //number of linear constriants
        final    int nonlin = 1;//number of nonlinear constraints
        double []  x0 = {0., 1.0,10.0 }; //first index is 0-index and not used
        FunctionOfManyVariables myObj = new FunctionOfManyVariables(){
            public double value(double [] x){
                return  (Math.pow(x[1]-1.5,2.0)+Math.pow(x[2]+2.5,2) );
            }
        };
        
        VectorOfFunctionsOfManyVariables Constraints = new VectorOfFunctionsOfManyVariables(){
            public double [] value(double [] x){
                double [] con = new double[nonlin+1];
                con[0]=0;
                con[1]=x[1] + x[2];
                return con;
            }
        };
        
        //linear constraints
        double [][] gres = new double[n+1][nlin+1];
        
        for (int i=0;i<gres.length;i++)
            for (int j=0;j<gres[0].length;j++) {
            gres[i][j]=0;}
        gres[1][1] = 1.0;
        gres[2][1] = .0;
        
        double [] xLow = {0.0, 0, 0.0};
        double [] xUp =  {0., 100.0,  100.0};
        double [] low = new double [n+nlin+nonlin+1];
        double [] up = new double [n+nlin+nonlin+1];
        for (int i = 1 ; i <= n ; i++ ) { low[i]=xLow[i];up[i]=xUp[i];}
        low[3] = up[3]=4;
        low[4] =up[4] = 5; //correponding to one non-linear equality constriant
        /* 0 linear inequality constraints >=0*/
        DonlpJava hwjni = new DonlpJava();
        //To get detailed console output itaktJ should be set to true
        //To get intermediate detailed iteration results te2J=true intermediate steps
        //hwjni.intaktJ=true;
        //hwjni.te2J=true;
        System.out.println("**************************************");
        System.out.println("*  Solving an unconstrianed problem  *");
        System.out.println("*  Min f(x)                          *");
        System.out.println("***************************************");
        hwjni.NlpUnConstrainedNumerical(myObj,x0);
        hwjni.DonlpJNI();
        
        System.out.println(String.format("The  optimal solution for the unconstrained problemis: \n"));
        for (int i=1;i<x0.length;i++) System.out.println(String.format("x*[%d] = %10f",i, x0[i]) );
        System.out.println(String.format("\nThe optimal f* = %f\n", myObj.value(x0)));
        
        System.out.println("*******************************************");
        System.out.println("*  Solving an Bound unconstrianed problem *");
        System.out.println("*  Min f(x)                               *");
        System.out.println("*  subject to                             *");
        System.out.println("*            x_l < x   < x_u              *");
        System.out.println("*******************************************");
        hwjni.NlpBoundConstrainedNumerical(myObj,x0, xLow, xUp);
        hwjni.DonlpJNI();
        System.out.println("The  optimal solution for the unconstrained problemis: \n");
        for (int i=1;i<x0.length;i++) System.out.println(String.format("x*[%d] = %10f",i, x0[i]) );
        System.out.println(String.format("\nThe optimal f* = %f\n", myObj.value(x0)));
        
        System.out.println("**************************************");
        System.out.println("*  Solving a constrianed problem     *");
        System.out.println("*  Min f(x)                          *");
        System.out.println("*  subject to                        *");
        System.out.println("*            x_l < x   < x_u         *");
        System.out.println("*            b_l < Ax  < b_u         *");
        System.out.println("*            c_l < g(x) < c_u        *");
        System.out.println("**************************************");
        hwjni.NlpMixedConstrainedNumerical( myObj,x0,  nlin,nonlin,gres, Constraints, low, up);
        hwjni.DonlpJNI();
        System.out.println("The  optimal solution : \n");
        for (int i=1;i<x0.length;i++) System.out.println(String.format("x*[%d] = %10f",i, x0[i]) );
        System.out.println(String.format("\nThe optimal f* = %f\n", myObj.value(x0)));
    }
}
