/*
 * DonlpJava
 *
 * Created on December 17, 2004, 11:44 AM
 */


package Exercises.opt;
import Interfaces.*;
import opt.DonlpJava;

/**
 *
 * @author  743661
 */
public class DonlpEX4  {
    
    
    
    
    
    //============================================================================================
//    public static void Mymain() {
      public static void main(String[] args) {
        
        
        
        final int n=200; //number of variables
        final   int nlin = 0; //number of linear constriants
        final    int nonlin = 0;//number of nonlinear constraints
        
        double []  x = new double [n+1];
        for (int i=0;i<x.length;i++)x[i]=1.0;
        
        
        
        FunctionOfManyVariables myObj = new FunctionOfManyVariables(){
            
            public double value(double [] x){
                double sum = 0;
                for (int i=1;i<x.length;i++)sum +=Math.pow(x[i]-i-.5,2);
                return sum;
                //return  (Math.pow(x[1]-1.5,2.0)+Math.pow(x[2]+2.5,2) );
                
            }
        };
        
        
        
        
        //====================
        VectorOfFunctionsOfManyVariables Constraints = new VectorOfFunctionsOfManyVariables(){
            
            public double [] value(double [] x){
                double [] con = new double[nonlin+1];
                con[0]=0;
                con[1]=x[1] + x[2];
                return con;
            }
        };
        
        
        
        //linear constraints
        
        
        double [][] gres = new double[n+1][nlin+1];
        
        for (int i=0;i<gres.length;i++)
            for (int j=0;j<gres[0].length;j++) {
            gres[i][j]=0;}
        
        
        //   gres[1][1] = 1.0;
        //    gres[2][1] = .0;
        
        
        
        
        double [] low = new double [n+nlin+nonlin+1];
        double [] up = new double [n+nlin+nonlin+1];
        for (int i = 0 ; i < (n+nlin+nonlin+1); i++ ) { low[i]=0;up[i]=i-1;}
        //              low[3] = up[3]=4;
        //              low[4] =up[4] = 5; //correponding to one non-linear equality constriant
        /* 0 linear inequality constraints >=0*/
        
        
        DonlpJava hwjni = new DonlpJava();
        hwjni.intaktJ=true;
        
        //   hwjni.NlpUnConstrainedNumerical(myObj, x);
        hwjni.NlpBoundConstrainedNumerical(myObj, x,low,up);
        // hwjni.NlpMixedConstrainedNumerical( myObj,x,nlin,nonlin,gres,Constraints,low,up);
        
        hwjni.DonlpJNI();
        
        System.out.println("The  optimal solution is: \n");
        for (int i=1;i<x.length;i++) System.out.println(String.format("x*[%d] = %10f \n",i, x[i]) );
        
       System.out.println(String.format("\nThe optimal f* = %f\n", myObj.value(x)));
        
        
        
        
    }
}

