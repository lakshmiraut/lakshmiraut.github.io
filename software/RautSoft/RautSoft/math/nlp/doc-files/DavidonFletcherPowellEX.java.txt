/*
 * DavidonFletcherPowell.java
 *
 * Created on December 6, 2004, 4:05 PM
 */

package Exercises.rautsoft.opt;
import  RautSoft.util.RautSoftUtil.*;
import static RautSoft.util.NRUtil.*;
import RautSoft.Interfaces.VectorOfFunctionsOfManyVariables;
import RautSoft.Interfaces.FunctionOfManyVariables;
import RautSoft.math.nlp.DavidonFletcherPowell;
/**
 *
 * @author  743661
 */
public class DavidonFletcherPowellEX {
   
  static int nfunc=0, ndfunc=0; 
    
    /**
     * This implements DavidonFletcherPowell optimization
     */
    public DavidonFletcherPowellEX() {
    }
    

    public static void main(String[] args) {
        
       
        FunctionOfManyVariables f = new FunctionOfManyVariables(){
            public double value(double [] x){
                nfunc ++;
                return 10.0*SQR(SQR(x[1])*(3.0-x[0])-SQR(x[0])*(3.0+x[0]))+
                SQR(2.0+x[0])/(1.0+SQR(2.0+x[0]));
            }
        };
        
        VectorOfFunctionsOfManyVariables  df = new VectorOfFunctionsOfManyVariables(){
            public double [] value(double [] x){
                ndfunc ++;
                double x1sqr=SQR(x[0]),x2sqr=SQR(x[1]),x1p2=x[0]+2.0;
                double x1p2sqr=SQR(x1p2);
                
                double [] df = new double[2];
                df[0]=20.0*(x2sqr*(3.0-x[0])-x1sqr*(3.0+x[0]))*
                (-x2sqr-6.0*x[0]-3.0*x1sqr)+2.0*x1p2/(1.0+x1p2sqr)
                -2.0*x1p2*x1p2sqr/SQR((1.0+x1p2sqr));
                df[1]=40.0*(x2sqr*(3.0-x[0])-x1sqr*(3.0+x[0]))*x[1]*(3.0-x[0]);
                return df;
            }
        };
        
        final int NDIM=2;
        final double GTOL=1.0e-4;
        pInt iter = new pInt(0);
        pDouble fret = new pDouble(0);
        double []  p = new double[NDIM];
          p[0]=0.1; p[1]=4.2;
          
        System.out.println("True minimum is at (-2.0,+-0.89442719)" );
        System.out.println("Initial vector: ("+ p[0] +"," + p[1] + ")" );
        
      
        
        DavidonFletcherPowell.dfpmin(p,GTOL,iter,fret,f,df);
        
        System.out.println("Iterations: " + iter.value);
        System.out.println("Func. evals: " + nfunc );
        System.out.println("Deriv. evals: " + ndfunc);
        System.out.println("Solution vector: ("+ p[0] +"," + p[1] + ")" );
        System.out.println("Func. value at solution " + fret.value);
    }
}
