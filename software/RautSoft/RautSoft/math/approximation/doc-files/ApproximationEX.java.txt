import RautSoft.Interfaces.FunctionOfOneVariable;
import static RautSoft.util.RautSoftUtil.*;
import static RautSoft.util.nrutil.*;
import RautSoft.math.approximation.Approximation;
import static RautSoft.math.approximation.Approximation.*;
import static RautSoft.math.functions.Orthopoly.*;

public  class ApproximationEX  {
    
    static       int n1 = 10;
    static        double [] x = new double [n1];
    static double[] y = new double [n1];
    static double x1=0;
    static double beta = 0.6;
    static double u(double x) {  return Math.pow(x,0.7);}
    static double y(double h){return Math.pow(h,.8); }
    static double V0(double x) {return u(x);}
    
    public ApproximationEX() {
    }
    
    public static void main(String[] args) {
        final       double a = 10, b =50;
        x = new double[n1];
        y = new double[n1];
        for (int i=0;i< x.length;i++){
            x[i]=ChebyshevZeros(i+1, x.length, a, b);
            y[i]=0;
        }
        Print("The orginal values of x and y where x's are the Chebyshev zeroes ");
        for (int i=0;i<n1;i++){
            y[i]=u(x[i]);
            Print("(x, f(x) = (" + x[i] + " " + y[i] +")" );
        }
        double dyy=0;
        pDouble pdyy=new pDouble(dyy);
        double yy1 = polint(x, y, 100.0, pdyy);
        dyy=pdyy.value;
        Print("ploint: x = 100)= " + yy1 );
        Print("ploint: EROOR estimate " + dyy );
        
        for (int i=0;i < n1;i++){
            pDouble dy=new pDouble(0);
            double y1 = polint(x, y, x[i] +.05, dy);
            Print("ploint: x = " + (x[i]+.05) + " f(x)= " + y1 );
        }
        
        for (int i=0;i < n1;i++){
            double dy=0;
            double y1 = ratint(x, y, x[i] +.05, dy);
            Print("ratint: x = " + (x[i]+.05) + " f(x)= " + y1 );
        }
        
        for (int i=0;i < n1;i++){
            double dy=0;
            double y1 = splint(x, y,10,10, x[i] +.05);
            Print("splint: x = " + (x[i]+.05) + " f(x)= " + y1 );
        }
        
        final double dy=0;
        FunctionOfOneVariable fratint = new FunctionOfOneVariable() {
            public double value(double x1){
                return  ratint(x, y, x1, dy);} };
                
                FunctionOfOneVariable fpolint = new FunctionOfOneVariable() {
                    public double value(double x1){
                        pDouble dy = new pDouble(0);
                        return  polint(x, y, x1,dy);} };
                        
                        
                        FunctionOfOneVariable fsplint = new FunctionOfOneVariable() {
                            public double value(double x1){
                                return  splint(x, y, x1);} };
                                
                                
                                
                                FunctionOfOneVariable [] ff = new FunctionOfOneVariable[3];
                                ff[0]= fratint;
                                ff[1]=fpolint;
                                ff[2] = fsplint;
                                
                                //                                plot(ff,new double [] {a,a,a},new double []{b,b,b} );
                                
                                
                                FunctionOfOneVariable uu = new FunctionOfOneVariable() {
                                    public double value(double x1){
                                        return  u(x1);} };
                                        
                                        int n2=10;
                                        final double [] c =  chebft(a,b,n2,uu);
                                        PrintVector(c);
                                        
                                        FunctionOfOneVariable uchebfit = new FunctionOfOneVariable() {
                                            public double value(double x1){
                                                int m =6;
                                                return chebev(a,b,c,m,x1); } };
                                                
                                                
                                                for (int i=0;i < n1;i++){
                                                    double y1 = uchebfit.value( x[i] +.05);
                                                    Print("Chebfit: x = " + (x[i]+.05) + " f(x)= " + y1 );
                                                }
                                                
                                                FunctionOfOneVariable uchebfit2 = new FunctionOfOneVariable() {
                                                    public double value(double x1){
                                                        int m =7;
                                                        return ChebyshevApprox(y, m, a, b, x1 ); } };
                                                        
                                                        
                                                        Print("");
                                                        for (int i=0;i < n1;i++){
                                                            double y1 = uchebfit2.value( x[i]);
                                                            Print("Chebfit2: x = " + (x[i]) + " f(x)= " + y1 + " Error: =" + (u(x[i])-y1) );
                                                        }
                                                        
                                                        
    }
    
}
