package Exercises.rautsoft.opt;
import java.io.*;
import static RautSoft.util.RautSoftUtil.*;
import static RautSoft.math.lp.solve.*;
import Jama.Matrix;
import static RautSoft.math.lp.LpSolve.*;
import RautSoft.math.lp.Simplex;
import RautSoft.math.lp.constant;
import RautSoft.math.lp.lprec;


public class LpSolveEX2  {
    
    
    
    public static void main(String args[]) {
   
     
        {//ex3
            
            System.out.println("**************************************");
            System.out.println("**************************************");
            
            //       public static void main(String args[]) {
            //  public static void myMain() {
            String ps;
            //   PrintStream( ps);// =new PrintStream();
            RautSoft.math.lp.solve lpSolve = new RautSoft.math.lp.solve();
            lprec lpIn = new lprec(0, 2);
            
           /*
             lpIn.debug = TRUE;
             lpIn.verbose = TRUE;
             lpIn.trace = TRUE;
            */
            
            lpIn.print_duals=1;  //This flag will make dual to be printed.
            //   lpIn.trace = 1;
            double v[] = new double[4];
            double[] rhs = {
                10.0, 6.5, 25};
                String s;
                s = "1.5 2.5";
                //    lpSolve.str_set_obj_fn(lpIn, s);
                //instead of the above string objective function, I am using the following direct specification of the objective function
                double[] obj = {
                    0, 1.5, 2.5}; //TRhe first entry has to be zero which is the value of the objective function in simplex to start with
                    lpSolve.set_obj_fn(lpIn, obj); // (arguments are (lprec, double[])
                    
                    lpSolve.set_maxim(lpIn);
                    //    rhs = ;
                    String str[] = {
                        "2 1",
                                "1 2",
                                "1 1 "
                    };
                    
                    //   for (int i = 0; i < 3; i++ ) {
                    //     lpSolve.str_add_constraint(lpIn, str[i], LE, rhs[i]);
                    //   }
                    
                    //Instead of above commented loops, I am using explicit statements for constriants
                    lpSolve.str_add_constraint(lpIn, str[0], LE, rhs[0]);
                    lpSolve.str_add_constraint(lpIn, str[1], LE, rhs[1]);
                    lpSolve.str_add_constraint(lpIn, str[2], LE, rhs[2]);
                    
                    //The following constraints the first variable to be integer valued.
                    lpSolve.set_int(lpIn, 1, TRUE);
                    
                    // Adding contraint directly by the method lpSolve.add_constraint(lprec lp, double[] row, short constr_type, double rh)
                    double[] const4 = {
                        0, 1.0, 2.0};
                        lpSolve.add_constraint(lpIn, const4, LE, 30.0);
                        
                        lpSolve.set_upbo(lpIn, 1, 6.0); //This sets upperbound for the variable 1 (again variable 0 is Objective function
                        lpSolve.set_lowbo(lpIn, 1, 1.0); //This sets lowerbound for the variable 1 (again variable 0 is Objective function
                        lpSolve.set_maxim(lpIn); //Instructing that the problem is a maximization problem which is default,alt set_minim(lpIn)
                        for (int i = 0; i <= lpIn.getRows(); i++) {
                            lpSolve.get_row(lpIn, i, v);
                            
                            for (int index = 1; index <= lpIn.getColumns(); index++) {
                                Print(v[index] + " ");
                                
                            }
                            Print("\n");
                        }
                        
                        int result = lpSolve.solve(lpIn);
                        
                        if (result == constant.OPTIMAL) {
                            lpSolve.print_solution(lpIn);
                            Print("Here I am printing the solution vector directly");
                            double [] x_opt=  lpSolve.getPrimalSolution(lpIn);
                            PrintVector(x_opt);
                            
                            Print("\nThe dual solution is :\n");
                            PrintVector( lpSolve.getDualSolution(lpIn)  );
                            
                        } else
                            Print("no optimal solution");
                      
                        
        } //ex3 end
}
}
