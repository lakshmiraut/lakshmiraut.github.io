/*
 * imulatedAnnealingEX.java
 *
 * Created on December 12, 2004, 6:04 PM
 */

package Exercises.rautsoft.opt;
import  RautSoft.util.RautSoftUtil.*;
import static RautSoft.util.NRUtil.*;
import static RautSoft.math.nlp.SimulatedAnnealing.*;
import RautSoft.Interfaces.FunctionOfManyVariables;
/**
 *
 * @author  743661
 */
public class SimulatedAnnealingEX {
    
    /** Creates a new instance of imulatedAnnealingEX */
    public SimulatedAnnealingEX() {
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        FunctionOfManyVariables tfunk = new  FunctionOfManyVariables(){
            public double value(double [] x){
                return -( (x[0]-0.0)*(x[0]-0.0) + (x[1]-1.0)*(x[1]-1.0) + (x[2]-2.0)*(x[2]-2.0) + (x[3]-3.0)*(x[3]-3.0));
            }
        };
        
        
        int NP=4, MP=NP+1;
        double FTOL=1.0e-6;
        final double []  xoff={10.0,10.0,10.0,10.0};
        int i,iiter,j,jiter,nit;
        pInt iter=new pInt(0);
        pDouble yb = new pDouble(Double.MAX_VALUE);
        double temptr,ybb;
        double [] x = new double [NP];
        double  [] y = new double [MP];
        double  [] pb = new double [NP];
        double  [][] p = new double [MP][NP];
        
        for (i=0;i<MP;i++)
            for (j=0;j<NP;j++) p[i][j]=0.0;
        
        for (;;) {
            for (j=1;j<MP;j++) p[j][j-1]=1.0;
            for (i=0;i<MP;i++) {
                for (j=0;j<NP;j++) x[j]=(p[i][j] += xoff[j]);
                y[i]=tfunk.value(x);
            }
            yb.value=1.0e30;
            //"Input t, iiter (t=0 to end):" );
            temptr = 1; iiter = 10;
            if (temptr <= 0.0) break;
            ybb=1.0e30;
            nit=0;
            for (jiter=0;jiter<100;jiter++) {
                iter.value=iiter;
                temptr *= 0.8;
                amebsa(p,y,pb,yb,FTOL,tfunk,iter,temptr);
                nit += iiter-iter.value;
                if (yb.value < ybb) {
                    ybb=yb.value;
                    System.out.println("\t"+ nit+ "\t" + temptr);
                    for (j=0;j<NP;j++) System.out.println("\t"+ pb[j]);
                    System.out.println("\t\t"+ yb);
                }
                if (iter.value > 0) break;
            }
            System.out.println("Vertices of final 3-D simplex and");
            System.out.println(" function values at the vertices:" );
            System.out.println("i \t\t\t w[i] \t\t\t  x[i] \t\t y[i] \t\tz[i] \t\t function");
            for (i=0;i<MP;i++) {
                System.out.println("\t\t "+ i );
                for (j=0;j<NP;j++) System.out.println("\t\t"+ p[i][j]);
                System.out.println( y[i]);
            }
            
            for (j=0;j<NP;j++) System.out.println( pb[j]);
            System.out.println( yb);
        }
        System.out.println("Normal completion");
        
    }
   
    
}
